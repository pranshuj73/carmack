package cmd

import (
	"fmt"
	"os"
	"os/exec"
	"time"
	"path/filepath"

	"github.com/pranshuj73/carmack/utils"

	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var syncCmd = &cobra.Command{
	Use:   "sync",
	Short: "Sync your plan files with a remote git repository.",
	Long: `Sync your plan files with a remote git repository. This command will add all the files in the directory to the git repository, commit them with the current date and time, and push them to the remote repository.`,
	Run: handleSync,
}

var syncInitCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize a new Git repository",
	Run:   handleSyncInit,
}

func init() {
	rootCmd.AddCommand(syncCmd)
	syncCmd.AddCommand(syncInitCmd)
}

func handleSync(cmd *cobra.Command, args []string) {
	configDirVal := viper.GetString("directory")
	plansDir, dirErr := homedir.Expand(configDirVal)
	if dirErr != nil {
		fmt.Println("Error expanding directory:", dirErr)
		os.Exit(1)
	}

	if _, err := os.Stat(plansDir); os.IsNotExist(err) {
		dirErr := utils.EnsureDirectoryExists(plansDir)
		if dirErr != nil {
			fmt.Println("Error ensuring directory exists:", dirErr)
			os.Exit(1)
		}
	}

	gitDir := filepath.Join(plansDir, ".git")
	if _, err := os.Stat(gitDir); os.IsNotExist(err) {
		fmt.Println("Not a git repository. Please run `carmack sync init` setup sync.")
		os.Exit(1)
	}

	// Run `git pull`
	err := runGitCommand(plansDir, "pull", "origin", "main")
	if err != nil {
		fmt.Println("Error pulling from remote:", err)
		os.Exit(1)
	}

	// Run `git add .`
	err = runGitCommand(plansDir, "add", ".")
	if err != nil {
		fmt.Println("Error adding changes:", err)
		os.Exit(1)
	}

	// Commit with a message containing the timestamp
	commitMessage := fmt.Sprintf("sync: %s", time.Now().Format("2006-01-02 15:04:05"))
	err = runGitCommand(plansDir, "commit", "-m", commitMessage)
	if err != nil {
		fmt.Println("Error committing changes:", err)
		os.Exit(1)
	}

	// Run `git push`
	err = runGitCommand(plansDir, "push", "origin", "main")
	if err != nil {
		fmt.Println("Error pushing changes:", err)
		os.Exit(1)
	}

	fmt.Println("Successfully synced with git.")
}

func handleSyncInit(cmd *cobra.Command, args []string) {
	plansDir := viper.GetString("directory")
	if _, err := os.Stat(plansDir); os.IsNotExist(err) {
		dirErr := utils.EnsureDirectoryExists(plansDir)
		if dirErr != nil {
			fmt.Println("Error ensuring directory exists:", dirErr)
			os.Exit(1)
		}
	}

	gitDir := filepath.Join(plansDir, ".git")
	if _, err := os.Stat(gitDir); os.IsNotExist(err) {
		err := runGitCommand(plansDir, "init")
		if err != nil {
			fmt.Println("Error initializing git repository:", err)
			os.Exit(1)
		}

		// ask for the remote repository URL
		var remoteURL string
		fmt.Print("Enter the remote repository URL: ")
		fmt.Scanln(&remoteURL)

		err = runGitCommand(plansDir, "remote", "add", "origin", remoteURL)

		if err != nil {
			fmt.Println("Error adding remote repository:", err)
			os.Exit(1)
		}

		err = runGitCommand(plansDir, "branch", "-M", "main")
		if err != nil {
			fmt.Println("Error renaming branch:", err)
			os.Exit(1)
		}

		// create a README.md file
		readmeContent := "# Plan Files\n\nThis repository contains my daily plan files.\n\n---\n\nGenerated by Carmack."
		err = os.WriteFile(filepath.Join(plansDir, "README.md"), []byte(readmeContent), 0644)

		if err != nil {
			fmt.Println("Error creating README.md:", err)
			os.Exit(1)
		}

		err = runGitCommand(plansDir, "add", ".")
		if err != nil {
			fmt.Println("Error adding README.md:", err)
			os.Exit(1)
		}

		err = runGitCommand(plansDir, "commit", "-m", "Sync: Add README.md")
		if err != nil {
			fmt.Println("Error committing README.md:", err)
			os.Exit(1)
		}

		err = runGitCommand(plansDir, "push", "origin", "main")
		if err != nil {
			fmt.Println("Error pushing README.md:", err)
			os.Exit(1)
		}


		fmt.Println("Sync setup complete. You can now run `carmack sync` to sync your plan files.")
	} else {
		fmt.Println("Git repository already exists.")
		os.Exit(1)
	}
}

// runGitCommand is a helper function to run git commands
func runGitCommand(plansDir string, args ...string) error {
	cmd := exec.Command("git", args...)
	cmd.Dir = plansDir
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}
